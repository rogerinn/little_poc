-- The C compiler identification is GNU 13.2.1
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Configuring done (0.1s)
-- Generating done (0.0s)
-- Build files have been written to: /home/rogerinn/dev/runcJs/compiled
CMake configurado com sucesso.
make: Entrando no diretório '/home/rogerinn/dev/runcJs/compiled'

[ 20%] Building C object CMakeFiles/program.dir/src/dot_verify.c.o
[ 40%] Building C object CMakeFiles/program.dir/src/hashmap.c.o
[ 60%] Building C object CMakeFiles/program.dir/src/loadfile.c.o
[ 80%] Building C object CMakeFiles/program.dir/src/main.c.o
[100%] Linking C executable /home/rogerinn/dev/runcJs/bin/program
[100%] Built target program
make: Saindo do diretório '/home/rogerinn/dev/runcJs/compiled'

Compilação concluída com sucesso.
--------------------------------
Running...
--------------------------------


OPBLOCK: import
OPCODE: "
VariableExpr: aa
OPCODE: "
OPCODE: ;
OPBLOCK: import
OPCODE: '
VariableExpr: aa
OPCODE: '
OPCODE: ;
OPBLOCK: let
VariableExpr: aa
OPCODE: =
OPCODE: (
MultExpr: a 
MultExpr: , 
MultExpr: a 
OPCODE: )
OPCODE: =
OPCODE: >
OPCODE: {
MultExpr: let 
MultExpr: name 
MultExpr: = 
MultExpr: " 
MultExpr: Rogerio 
MultExpr: " 
MultExpr: ; 
MultExpr: console 
MultExpr: . 
MultExpr: log 
MultExpr: ( 
MultExpr: " 
MultExpr: aaa 
MultExpr: " 
MultExpr: ) 
MultExpr: ; 
MultExpr: return 
MultExpr: name 
MultExpr: ; 
OPCODE: }
OPCODE: ;
OPBLOCK: let
VariableExpr: aa
OPCODE: =
OPCODE: (
MultExpr: a 
MultExpr: , 
MultExpr: a 
OPCODE: )
OPCODE: =
OPCODE: >
OPCODE: {
MultExpr: let 
MultExpr: name 
MultExpr: = 
MultExpr: " 
MultExpr: Rogerio 
MultExpr: " 
MultExpr: ; 
MultExpr: console 
MultExpr: . 
MultExpr: log 
MultExpr: ( 
MultExpr: " 
MultExpr: aaa 
MultExpr: " 
MultExpr: ) 
MultExpr: ; 
MultExpr: return 
MultExpr: name 
MultExpr: ; 
OPCODE: }
OPCODE: ;
OPBLOCK: let
VariableExpr: aa
OPCODE: =
OPCODE: (
MultExpr: a 
MultExpr: , 
MultExpr: a 
OPCODE: )
OPCODE: =
OPCODE: >
OPCODE: {
MultExpr: let 
MultExpr: name 
MultExpr: = 
MultExpr: " 
MultExpr: Rogerio 
MultExpr: " 
MultExpr: ; 
MultExpr: console 
MultExpr: . 
MultExpr: log 
MultExpr: ( 
MultExpr: " 
MultExpr: aaa 
MultExpr: " 
MultExpr: ) 
MultExpr: ; 
MultExpr: return 
MultExpr: name 
MultExpr: ; 
OPCODE: }
OPCODE: ;
OPBLOCK: let
VariableExpr: aa
OPCODE: =
OPCODE: (
MultExpr: a 
MultExpr: , 
MultExpr: a 
OPCODE: )
OPCODE: =
OPCODE: >
OPCODE: {
MultExpr: let 
MultExpr: name 
MultExpr: = 
MultExpr: " 
MultExpr: Rogerio 
MultExpr: " 
MultExpr: ; 
MultExpr: console 
MultExpr: . 
MultExpr: log 
MultExpr: ( 
MultExpr: " 
MultExpr: aaa 
MultExpr: " 
MultExpr: ) 
MultExpr: ; 
MultExpr: return 
MultExpr: name 
MultExpr: ; 
OPCODE: }
OPCODE: ;
OPBLOCK: let
VariableExpr: aa
OPCODE: =
OPCODE: (
MultExpr: a 
MultExpr: , 
MultExpr: a 
OPCODE: )
OPCODE: =
OPCODE: >
OPCODE: {
MultExpr: let 
MultExpr: name 
MultExpr: = 
MultExpr: " 
MultExpr: Rogerio 
MultExpr: " 
MultExpr: ; 
MultExpr: console 
MultExpr: . 
MultExpr: log 
MultExpr: ( 
MultExpr: " 
MultExpr: aaa 
MultExpr: " 
MultExpr: ) 
MultExpr: ; 
MultExpr: return 
MultExpr: name 
MultExpr: ; 
OPCODE: }
OPCODE: ;
OPBLOCK: let
VariableExpr: name
OPCODE: =
OPCODE: [
MultExpr: 1 
MultExpr: , 
MultExpr: 2 
OPCODE: ]
OPCODE: ;

 ------->> Tempo: 0.000066 segundos <<-------
